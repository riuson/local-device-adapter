name: .NET Desktop

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'
jobs:
  build_for_windows:
    name: Build for Windows

    strategy:
      matrix:
        dotnet: ["net472", "net6.0"]
        selfcont: [false, true]
        exclude:
          - dotnet: net472
            selfcont: true

    runs-on: [self-hosted, Linux]

    env:
      ProjectName: LocalDeviceAdapter/LocalDeviceAdapter.csproj
      InnoSetupCompiler: /usr/sbin/iscc.sh
      InstallerFileName: ${{ format('lda_win_{0}_{1}', matrix.selfcont && 'sc' || 'fd',  matrix.dotnet ) }}
      PublishDirectory: ${{ github.workspace }}/publish
      SelfContainedFlag: ${{ format('{0}', matrix.selfcont && '--self-contained' || '--no-self-contained' ) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore
        working-directory: src
        run: |
          dotnet restore \
          ${{ env.ProjectName }} \
          -p:TargetFramework=${{ matrix.dotnet }} \
          -r win10-x64

      - name: Publish
        working-directory: src
        run: |
          dotnet publish \
          ${{ env.ProjectName }} \
          -c Release \
          -f ${{ matrix.dotnet }} \
          -r win10-x64 \
          ${{ env.SelfContainedFlag }} \
          -property:PublishDir=${{ env.PublishDirectory }}

      - name: Create Installer
        run: |
          "${{ env.InnoSetupCompiler }}" \
          "install\\master.iss" \
          /DRootDir="Z:\\work" \
          /DInstallerFileName="${{ env.InstallerFileName }}" \
          /DMainFile="Z:\\work\\publish\\LocalDeviceAdapter.exe" \
          /DOtherFiles="Z:\\work\\publish\\" \
          /DMyAppVersion="${{ env.GitVersion_MajorMinorPatch }}" \
          /DMyAppDetailedVersion="${{ env.GitVersion_FullSemVer }}.Sha.${{ env.GitVersion_ShortSha }}"

      - name: Create Archive
        run: |
          zip -r ${{ github.workspace }}/${{ env.InstallerFileName }}.zip ${{ env.PublishDirectory }}/

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/${{ env.InstallerFileName }}.zip
          name: ${{ env.InstallerFileName }}.zip

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/install/Output/${{ env.InstallerFileName }}.exe
          name: ${{ env.InstallerFileName }}.exe

  build_for_linux:
    name: Build for Linux

    strategy:
      matrix:
        dotnet: ["net6.0"]
        os: ["linux-x64"]
        selfcont: [false, true]

    runs-on: [self-hosted, Linux]

    env:
      ProjectName: LocalDeviceAdapter/LocalDeviceAdapter.csproj
      InnoSetupCompiler: /usr/sbin/iscc.sh
      InstallerFileName: ${{ format('lda_linux_{0}_{1}', matrix.selfcont && 'sc' || 'fd',  matrix.dotnet ) }}
      PublishDirectory: ${{ github.workspace }}/publish
      SelfContainedFlag: ${{ format('{0}', matrix.selfcont && '--self-contained' || '--no-self-contained' ) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore
        working-directory: src
        run: |
          dotnet restore \
          ${{ env.ProjectName }} \
          -p:TargetFramework=${{ matrix.dotnet }} \
          -r win10-x64

      - name: Publish
        working-directory: src
        run: |
          dotnet publish \
          ${{ env.ProjectName }} \
          -c Release \
          -f ${{ matrix.dotnet }} \
          -r ${{ matrix.os }} \
          ${{ env.SelfContainedFlag }} \
          -property:PublishDir=${{ env.PublishDirectory }}

      - name: Create Archive
        working-directory: src
        run: |
          tar -czvf ${{ github.workspace }}/${{ env.InstallerFileName }}.tar.gz -C ${{ env.PublishDirectory }} .

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          # Issue "upload-artifact zips .tar.gz archive"
          # https://github.com/actions/upload-artifact/issues/109
          # All files are uploaded as zip archives.
          path: ${{ github.workspace }}/${{ env.InstallerFileName }}.tar.gz
          name: ${{ env.InstallerFileName }}.tar.gz

  create_release:
    name: Create Release
    needs: [build_for_windows, build_for_linux]
    runs-on: [self-hosted, Linux]
    timeout-minutes: 1

    steps:
      - name: Get Latest Tag
        id: create_tag
        run: |
          tag=$(basename "${{ github.ref }}")
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          updateOnlyUnreleased: true
          name: Release ${{ steps.create_tag.outputs.tag }}
          draft: true

  upload_release_for_windows:
    name: Add Windows Artifacts to Release
    needs: [create_release]
    runs-on: [self-hosted, Linux]
    timeout-minutes: 1

    strategy:
      matrix:
        dotnet: ["net472", "net6.0"]
        selfcont: [false, true]
        exclude:
          - dotnet: net472
            selfcont: true

    env:
      InstallerFileName: ${{ format('lda_win_{0}_{1}', matrix.selfcont && 'sc' || 'fd',  matrix.dotnet ) }}
      ArtifactsDirectory: ${{ github.workspace }}/artifacts

    steps:
      - name: Collect Installers
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.InstallerFileName }}.exe
          path: ${{ env.ArtifactsDirectory }}

      - name: Collect Archives
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.InstallerFileName }}.zip
          path: ${{ env.ArtifactsDirectory }}

      - name: Upload Installers
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "${{ env.ArtifactsDirectory }}/${{ env.InstallerFileName }}.exe"
          artifactContentType: application/vnd.microsoft.portable-executable
          artifactErrorsFailBuild: true
          allowUpdates: true
          draft: true

      - name: Upload Archives
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "${{ env.ArtifactsDirectory }}/${{ env.InstallerFileName }}.zip"
          artifactContentType: application/vnd.microsoft.portable-executable
          artifactErrorsFailBuild: true
          allowUpdates: true
          draft: true

  upload_release_for_linux:
    name: Add Archives to Release
    needs: [create_release]
    runs-on: [self-hosted, Linux]
    timeout-minutes: 1

    strategy:
      matrix:
        dotnet: ["net6.0"]
        os: ["linux-x64"]
        selfcont: [false, true]

    env:
      InstallerFileName: ${{ format('lda_linux_{0}_{1}', matrix.selfcont && 'sc' || 'fd',  matrix.dotnet ) }}
      ArtifactsDirectory: ${{ github.workspace }}/artifacts

    steps:
      - name: Collect Archives
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.InstallerFileName }}.tar.gz
          path: ${{ env.ArtifactsDirectory }}

      - name: List downloaded files
        run: |
          ls ${{ env.ArtifactsDirectory }}

      - name: Upload Archives
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "${{ env.ArtifactsDirectory }}/${{ env.InstallerFileName }}.tar.gz"
          artifactContentType: application/octet-stream
          artifactErrorsFailBuild: true
          allowUpdates: true
          draft: true

  publish_release:
    name: Publish Release
    needs: [upload_release_for_windows, upload_release_for_linux]
    runs-on: [self-hosted, Linux]
    timeout-minutes: 1

    steps:
      - name: Publish Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          makeLatest: true
          draft: false
