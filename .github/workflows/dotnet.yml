name: .NET Desktop

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'
jobs:
  # Build the application
  build:
    name: Build Artifacts
    strategy:
      matrix:
        dotnet: [ 'net472', 'net6.0-windows' ]

    runs-on: [ self-hosted, Linux ]

    env:
      Solution_Name: LocalDeviceAdapter.sln                   # Replace with your solution name, i.e. MyWpfApp.sln.
      InnoSetupCompiler: /usr/sbin/iscc.sh
      InstallerFileName: LocalDeviceAdapterInstaller_${{ matrix.dotnet }}
      PublishDirectory: ${{ github.workspace }}/publish
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:

    # Checkout sources
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore ${{ env.Solution_Name }} -p:TargetFramework=${{ matrix.dotnet }}
      working-directory: src

    # Publish the application
    - name: Publish the application
      working-directory: src
      run: dotnet publish ${{ env.Solution_Name }} --no-restore -c Release -f ${{ matrix.dotnet }} -r win10-x64 --no-self-contained -property:PublishDir=${{ env.PublishDirectory }}

    # Compile with Inno Installer
    - name: Create Installer
      run: |
        "${{ env.InnoSetupCompiler }}" \
        "install\\master.iss" \
        /DRootDir="Z:\\work" \
        /DInstallerFileName="${{ env.InstallerFileName }}" \
        /DMainFile="Z:\\work\\publish\\LocalDeviceAdapter.exe" \
        /DOtherFiles="Z:\\work\\publish\\" \
        /DMyAppVersion="${{ env.GitVersion_MajorMinorPatch }}" \
        /DMyAppDetailedVersion="${{ env.GitVersion_FullSemVer }}.Sha.${{ env.GitVersion_ShortSha }}"

    # Upload artifacts
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/install/Output/${{ env.InstallerFileName }}.exe
        name: ${{ env.InstallerFileName }}.exe

  create_release:
    name: Create GitHub Release
    needs: [ build ]
    runs-on: [ self-hosted, Linux ]
    timeout-minutes: 1

    steps:

    - name: Get Latest Tag
      id: create_tag
      run: |
        tag=$(basename "${{ github.ref }}")
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1.12.0
      with:
        updateOnlyUnreleased: true
        name: Release ${{ steps.create_tag.outputs.tag }}
        draft: true

  upload_release:
    name: Upload Artifacts to GitHub Release
    needs: [ create_release ]
    runs-on: [ self-hosted, Linux ]
    timeout-minutes: 1

    strategy:
      matrix:
        dotnet: [ 'net472', 'net6.0-windows' ]

    env:
      InstallerFileName: LocalDeviceAdapterInstaller_${{ matrix.dotnet }}
      ArtifactsDirectory: ${{ github.workspace }}/artifacts

    steps:

    - name: Collect artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.InstallerFileName }}.exe
        path: ${{ env.ArtifactsDirectory }}

    - name: Upload Artifacts
      uses: ncipollo/release-action@v1.12.0
      with:
        artifacts: "${{ env.ArtifactsDirectory }}/*"
        artifactContentType: application/vnd.microsoft.portable-executable
        artifactErrorsFailBuild: true
        allowUpdates: true
        draft: true

  publish_release:
    name: Publish GitHub Release
    needs: [ upload_release ]
    runs-on: [ self-hosted, Linux ]
    timeout-minutes: 1

    steps:

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1.12.0
      with:
        allowUpdates: true
        makeLatest: true
        draft: false
